<channel version="4.4.2">
  <id>191c246c-a147-48e1-a45c-30f94a100140</id>
  <nextMetaDataId>4</nextMetaDataId>
  <name>LaunchURLToFHIR</name>
  <description></description>
  <revision>150</revision>
  <sourceConnector version="4.4.2">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="4.4.2">
      <pluginProperties>
        <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="4.4.2">
  <authType>NONE</authType>
        </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
      </pluginProperties>
      <listenerConnectorProperties version="4.4.2">
        <host>0.0.0.0</host>
        <port>80</port>
      </listenerConnectorProperties>
      <sourceConnectorProperties version="4.4.2">
        <responseVariable>d1</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <xmlBody>false</xmlBody>
      <parseMultipart>true</parseMultipart>
      <includeMetadata>false</includeMetadata>
      <binaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</binaryMimeTypes>
      <binaryMimeTypesRegex>true</binaryMimeTypesRegex>
      <responseContentType>text/plain</responseContentType>
      <responseDataTypeBinary>false</responseDataTypeBinary>
      <responseStatusCode>${statusCode}</responseStatusCode>
      <responseHeaders class="linked-hash-map">
        <entry>
          <string>Location</string>
          <list>
            <string>${redirect}</string>
          </list>
        </entry>
      </responseHeaders>
      <responseHeadersVariable></responseHeadersVariable>
      <useResponseHeadersVariable>false</useResponseHeadersVariable>
      <charset>UTF-8</charset>
      <contextPath>launch</contextPath>
      <timeout>30000</timeout>
      <staticResources/>
    </properties>
    <transformer version="4.4.2">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
          <name>Parse URL</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>// Source Transformer
logger.info(&quot;In Source Transformer: Processing inbound message from URL.&quot;);

/**
 * Converts a raw gender code (M, F, V, or longer strings starting with these) to a FHIR-compliant gender string.
 * Handles null/empty input, and defaults unrecognized values.
 * Uses startsWith() for more flexible matching.
 * @param {string} rawGender The raw gender string from the URL parameter (e.g., &apos;M&apos;, &apos;F&apos;, &apos;V&apos;, &apos;Male&apos;, &apos;Female&apos;, &apos;Vrouw&apos;).
 * @returns {string} The FHIR gender string (&apos;male&apos;, &apos;female&apos;, &apos;other&apos;, &apos;unknown&apos;).
 */
function convertRawGenderToFhirGender(rawGender) {
    var patientGenderFHIR = null;
    // Normalize input for case-insensitive comparison, if not null/empty
    var normalizedGender = (rawGender !== null &amp;&amp; rawGender !== &apos;&apos;) ? String(rawGender).toUpperCase() : null;

    if (normalizedGender === null) {
        // If gender parameter is not set or is empty
        patientGenderFHIR = &quot;unknown&quot;;
        logger.warn(&quot;Function: Patient gender parameter is not set or is empty. Defaulting to &apos;unknown&apos;.&quot;);
    } else if (normalizedGender.startsWith(&quot;M&quot;)) { // Check if it starts with &apos;M&apos;
        patientGenderFHIR = &quot;male&quot;;
    } else if (normalizedGender.startsWith(&quot;F&quot;) || normalizedGender.startsWith(&quot;V&quot;)) { // Check if it starts with &apos;F&apos; or &apos;V&apos;
        patientGenderFHIR = &quot;female&quot;;
    } else {
        // If it&apos;s set but doesn&apos;t start with &apos;M&apos;, &apos;F&apos;, or &apos;V&apos;
        patientGenderFHIR = &quot;other&quot;;
        logger.warn(&quot;Function: Unrecognized gender code received: &apos;&quot; + rawGender + &quot;&apos;. Defaulting to &apos;other&apos;.&quot;);
    }
    logger.info(&quot;Function: Mapped raw gender &apos;&quot; + rawGender + &quot;&apos; to FHIR gender: &apos;&quot; + patientGenderFHIR + &quot;&apos;.&quot;);
    return patientGenderFHIR;
}

/**
 * Converts a raw birth date string (e.g., YYYYMMDD, YYYY-MMDD, YYYYMM-DD)
 * to FHIR-compliant YYYY-MM-DD format using split and join for initial cleanup,
 * and then substring/join for final formatting.
 * @param {string} rawDate The raw birth date string from the URL parameter.
 * @returns {string|null} The formatted FHIR date string or null if unable to format.
 */
function convertRawDateToFhirDate(rawDate) {
    if (rawDate === null || rawDate === &apos;&apos;) {
        logger.warn(&quot;Function: Patient birth date parameter is not set or is empty. Returning null.&quot;);
        return null;
    }

    // Step 1: Split on &apos;-&apos; and then join the parts. This effectively removes hyphens.
    var parts = String(rawDate).split(&apos;-&apos;);
    var digitsOnly = parts.join(&apos;&apos;);

    // Step 2: Check if we have exactly 8 digits (YYYYMMDD)
    if (digitsOnly.length === 8) {
        var year = digitsOnly.substring(0, 4);
        var month = digitsOnly.substring(4, 6);
        var day = digitsOnly.substring(6, 8);

        // Step 3: Construct the final YYYY-MM-DD format using an array and .join()
        var formattedDate = [year, month, day].join(&apos;-&apos;);
        logger.info(&quot;Function: Mapped raw birth date &apos;&quot; + rawDate + &quot;&apos; to FHIR format: &apos;&quot; + formattedDate + &quot;&apos;.&quot;);
        return formattedDate;
    } else {
        logger.warn(&quot;Function: Birth date &apos;&quot; + rawDate + &quot;&apos; has &quot; + digitsOnly.length + &quot; digits after cleanup, expected 8. Cannot format. Returning null.&quot;);
        return null;
    }
}

try {
    var parameters = sourceMap.get(&quot;parameters&quot;);
    var patientId = null;
    var patientGenderRaw = null;
    var patientBirthDateRaw = null;
    var encounterId = null;
    var user = null;
    var supervisor = null;

    if (parameters !== null) {
        patientId = parameters.getParameter(&quot;patient&quot;);
        patientGenderRaw = parameters.getParameter(&quot;sex&quot;);
        patientBirthDateRaw = parameters.getParameter(&quot;dob&quot;);
        encounterId = parameters.getParameter(&quot;encounter&quot;);
        user = parameters.getParameter(&quot;user&quot;);
        supervisor = parameters.getParameter(&quot;supervisor&quot;);
        logger.info(&quot;URL Parameters extracted.&quot;);
    } else {
        logger.error(&quot;Parameters object is null. Cannot extract URL parameters.&quot;);
    }

    // Validate query params (optional, but good for debugging)
    if (patientId !== null) {
        logger.info(&quot;Parameter &apos;patient&apos; is set, value: &quot; + patientId);
    } else {
        logger.warn(&quot;Parameter &apos;patient&apos; is NOT set.&quot;);
    }
    if (encounterId !== null) {
        logger.info(&quot;Parameter &apos;encounter&apos; is set, value: &quot; + encounterId);
    } else {
        logger.info(&quot;Parameter &apos;encounter&apos; is NOT set.&quot;);
    }
    if (patientGenderRaw !== null &amp;&amp; patientGenderRaw !== &apos;&apos;) {
        logger.info(&quot;Parameter &apos;sex&apos; (raw) is set, value: &quot; + patientGenderRaw);
    } else {
        logger.warn(&quot;Parameter &apos;sex&apos; is NOT set or is empty.&quot;);
    }
    if (patientBirthDateRaw !== null &amp;&amp; patientBirthDateRaw !== &apos;&apos;) {
        logger.info(&quot;Parameter &apos;dob&apos; (raw) is set, value: &quot; + patientBirthDateRaw);
    } else {
        logger.warn(&quot;Parameter &apos;dob&apos; is NOT set or is empty.&quot;);
    }

    // --- Apply Conversion Functions ---
    var patientGenderFHIR = convertRawGenderToFhirGender(patientGenderRaw);
    var patientBirthDateFHIR = convertRawDateToFhirDate(patientBirthDateRaw);
    // --- End Apply Conversion Functions ---

    // Parse query params and store in channelMap
    // Patient Information
    channelMap.put(&quot;patientIdValue&quot;, patientId);
    channelMap.put(&quot;patientIdSystem&quot;, &quot;https://fhir.nexuzhealth.com/standards/fhir/NamingSystem/kws/pm/patient/eadnr&quot;);
    channelMap.put(&quot;patientGender&quot;, patientGenderFHIR); // Use the mapped FHIR gender
    channelMap.put(&quot;patientBirthDate&quot;, patientBirthDateFHIR); // Use the mapped FHIR birth date

    // Encounter Information
    channelMap.put(&quot;encounterIdValue&quot;, encounterId);
    channelMap.put(&quot;encounterIdSystem&quot;, &quot;https://fhir.nexuzhealth.com/standards/fhir/NamingSystem/kws/bifrost/receptie/cnr&quot;);
    channelMap.put(&quot;encounterStatus&quot;, &quot;unknown&quot;); // Encounter&apos;s status (e.g., &quot;planned&quot;, &quot;in-progress&quot;)
    channelMap.put(&quot;encounterRespIdSystem&quot;, &quot;https://tiro.health/standards/fhir/NamingSystem/kws/user-id&quot;); // Optional, responsible identifier for the encounter
    channelMap.put(&quot;encounterRespIdValue&quot;, supervisor); // Optional, responsible identifier for the encounter

    logger.info(&quot;Channel Map populated with patient and encounter data.&quot;);

} catch (e) {
    // Log any errors for debugging purposes
    logger.error(&quot;Fatal error in Source Transformer: &quot; + e.message + &quot;\nStack: &quot; + e.stack);
    throw e; // Re-throw the error to ensure the message fails in Mirth.
}</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
      </elements>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>RAW</inboundDataType>
      <outboundDataType>RAW</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.2">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.2">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.2">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.2">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="4.4.2">
      <elements/>
    </filter>
    <transportName>HTTP Listener</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="4.4.2">
      <metaDataId>1</metaDataId>
      <name>import_data_in_atticus</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="4.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="4.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <host>https://reports.tiro.health/fhir/r5</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>post</method>
        <headers class="linked-hash-map">
          <entry>
            <string>x-channel-name</string>
            <list>
              <string>${channelName}</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map"/>
        <useHeadersVariable>false</useHeadersVariable>
        <headersVariable></headersVariable>
        <useParametersVariable>false</useParametersVariable>
        <parametersVariable></parametersVariable>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>true</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>true</usePreemptiveAuthentication>
        <username>${tiroUsername}</username>
        <password>${tiroPassword}</password>
        <content>${transactionBundle}</content>
        <contentType>application/json</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="4.4.2">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <script>try {
	
	logger.info(&quot;destination tranformer&quot;);
	
	logger.info(&quot;Creating data import transaction bundle&quot;);

	// Create Patient Resource
	var patient = {
	    &quot;resourceType&quot;: &quot;Patient&quot;
	};
	patientIdSystem = channelMap.get(&quot;patientIdSystem&quot;);
	patientIdValue = channelMap.get(&quot;patientIdValue&quot;);
	if (patientIdSystem &amp;&amp; patientIdValue) {
	    patient.identifier = [{
	        &quot;value&quot;: patientIdValue,
	        &quot;system&quot;: patientIdSystem
	    }];
	} else {
	    logger.warn(&quot;Patient has no identifier (no value and/or system)&quot;);
	}
	patientFamilyName = channelMap.get(&quot;patientFamilyName&quot;);
	patientGivenName = channelMap.get(&quot;patientGivenName&quot;);
	if (patientFamilyName || patientGivenName) {
	    patient.name = [{}]; // Initialize as an array with one empty object
	    if (patientFamilyName) {
	        patient.name[0].family = patientFamilyName;
	    }
	    if (patientGivenName) {
	        patient.name[0].given = [patientGivenName];
	    }
	}
	patientGender = channelMap.get(&quot;patientGender&quot;);
	if (patientGender) {
	    patient.gender = patientGender;
	}
	patientBirthDate = channelMap.get(&quot;patientBirthDate&quot;);
	if (patientBirthDate) {
	    patient.birthDate = patientBirthDate;
	}
	var patientUuid = &quot;urn:uuid:&quot; + UUIDGenerator.getUUID();
	logger.info(&quot;Handled patient resource&quot;);
	
	// Create Encounter Resource
	var encounter = {
	    &quot;resourceType&quot;: &quot;Encounter&quot;
	};
	encounterIdValue = channelMap.get(&quot;encounterIdValue&quot;);
	encounterIdSystem = channelMap.get(&quot;encounterIdSystem&quot;);
	if (encounterIdSystem &amp;&amp; encounterIdValue) {
	    encounter.identifier = [{
	        &quot;value&quot;: encounterIdValue,
	        &quot;system&quot;: encounterIdSystem
	    }];
	} else {
	    logger.warn(&quot;Encounter has no identifier (no value and/or system)&quot;);
	}
	var encounterRespIdSystem = channelMap.get(&quot;encounterRespIdSystem&quot;);
	var encounterRespIdValue = channelMap.get(&quot;encounterRespIdValue&quot;);
	if (encounterRespIdSystem &amp;&amp; encounterRespIdValue) {
		var responsibleUuid = &quot;urn:uuid:&quot; + UUIDGenerator.getUUID();
		encounter.participant = [
		    {
		      &quot;type&quot;: [
		        {
		          &quot;coding&quot;: [
		            {
		              &quot;system&quot;: &quot;http://terminology.hl7.org/CodeSystem/v3-ParticipationType&quot;,
		              &quot;code&quot;: &quot;RESP&quot;,
		              &quot;display&quot;: &quot;responsible party&quot;
		            }
		          ]
		        }
		      ],
		      &quot;actor&quot;: {
		        &quot;identifier&quot;: {
		        	&quot;system&quot;: encounterRespIdSystem,
		        	&quot;value&quot;: encounterRespIdValue
		        	},
		      }
		    }
		  ];
	}
	
	var encounterStatus = channelMap.get(&quot;encounterStatus&quot;);
	if (encounterStatus) {
	    encounter.status = encounterStatus;
	}
	if (patientUuid) {
	    encounter.subject = {
	        &quot;reference&quot;: patientUuid
	    };
	} else {
	    logger.error(&quot;Encounter has no subject&quot;);
	}
	var encounterUuid = &quot;urn:uuid:&quot; + UUIDGenerator.getUUID();
	logger.info(&apos;Handled encounter resource&apos;);

	// Create CompleteQR Task Resource
	var task = {
         &quot;resourceType&quot;: &quot;Task&quot;,
         &quot;intent&quot;: &quot;order&quot;,
         &quot;code&quot;: {
             &quot;text&quot;: &quot;CT scan report&quot;, // this is the title of report (hardcoded for now)
             &quot;coding&quot;: [
                 {
                     &quot;system&quot;: &quot;http://fhir.tiro.health/CodeSystem/task-type&quot;,
                     &quot;code&quot;: &quot;complete-questionnaire&quot;,
                 }
             ],
         },
         &quot;status&quot;: &quot;draft&quot;,
         &quot;for&quot;: {
	        &quot;reference&quot;: patientUuid
	    }
     };
	if (encounterUuid) {
	    task.encounter = {
	        &quot;reference&quot;: encounterUuid
	    }
	} 
	var taskUuid = &quot;urn:uuid:&quot; + UUIDGenerator.getUUID();
	logger.info(&apos;Handled task resource&apos;);
	
	// Create Practitioner Resource
	var practitioner = {
	    &quot;resourceType&quot;: &quot;Practitioner&quot;,
	};
	practitionerIdValue = channelMap.get(&quot;practitionerIdValue&quot;);
	practitionerIdSystem = channelMap.get(&quot;practitionerIdSystem&quot;);
	if (practitionerIdSystem &amp;&amp; practitionerIdValue) {
	    practitioner.identifier = [{
	        &quot;value&quot;: practitionerIdValue,
	        &quot;system&quot;: practitionerIdSystem
	    }];
	} else {
	    logger.warn(&quot;Practitioner has no identifier (no value and/or system)&quot;);
	}
	practitionerFamilyName = channelMap.get(&quot;practitionerFamilyName&quot;);
	practitionerGivenName = channelMap.get(&quot;practitionerGivenName&quot;);
	practitionerPrefix = channelMap.get(&quot;practitionerPrefix&quot;);
	if (practitionerFamilyName || practitionerGivenName || practitionerPrefix) {
	    practitioner.name = [{}]; // Initialize as an array with one empty object
	    if (practitionerFamilyName) {
	        practitioner.name[0].family = practitionerFamilyName;
	    }
	    if (practitionerGivenName) {
	        practitioner.name[0].given = [practitionerGivenName];
	    }
	    if (practitionerPrefix) {
	        practitioner.name[0].prefix = [practitionerPrefix];
	    }
	}
	var practitionerUuid = &quot;urn:uuid:&quot; + UUIDGenerator.getUUID();
	logger.info(&apos;Handled practitioner resource&apos;);
	
	// Create FHIR Bundle
	var bundle = {
	    &quot;resourceType&quot;: &quot;Bundle&quot;,
	    &quot;type&quot;: &quot;transaction&quot;,
	    &quot;entry&quot;: []
	};
	
	if (patientIdSystem &amp;&amp; patientIdValue) {
	    bundle.entry.push({
	        &quot;resource&quot;: patient,
	        &quot;fullUrl&quot;: patientUuid,
	        &quot;request&quot;: {
	            &quot;method&quot;: &quot;PUT&quot;,
	            &quot;url&quot;: &quot;Patient?identifier=&quot; + encodeURIComponent(patientIdSystem + &quot;|&quot; + patientIdValue)
	        }
	    });
	}
	
	if (encounterIdSystem &amp;&amp; encounterIdValue) {
	    bundle.entry.push({
	        &quot;resource&quot;: encounter,
	        &quot;fullUrl&quot;: encounterUuid,
	        &quot;request&quot;: {
	            &quot;method&quot;: &quot;PUT&quot;,
	            &quot;url&quot;: &quot;Encounter?identifier=&quot; + encodeURIComponent(encounterIdSystem + &quot;|&quot; + encounterIdValue)
	        }
	    });
	}
	
	if (practitionerIdSystem &amp;&amp; practitionerIdValue) {
	    bundle.entry.push({
	        &quot;resource&quot;: practitioner,
	        &quot;fullUrl&quot;: practitionerUuid,
	        &quot;request&quot;: {
	            &quot;method&quot;: &quot;PUT&quot;,
	            &quot;url&quot;: &quot;Practitioner?identifier=&quot; + encodeURIComponent(practitionerIdSystem + &quot;|&quot; + practitionerIdValue)
	        }
	    });
	}
     bundle.entry.push({
        &quot;resource&quot;: task,
        &quot;fullUrl&quot;: taskUuid,
        &quot;request&quot;: {
            &quot;method&quot;: &quot;POST&quot;, // TODO change to conditional create based on CNR
            &quot;url&quot;: &quot;Task&quot;
        }
	});
	
	// Convert bundle to JSON
	var jsonString = JSON.stringify(bundle);
	
	logger.info(&quot;transactionBundle: &quot; + jsonString)
	channelMap.put(&quot;transactionBundle&quot;, jsonString);

} catch (error) {
    // Log any errors for debugging purposes
    logger.error(&quot;Error while parsing the URL: &quot; + error.message);
    throw error; // Re-throw the error to handle it upstream if needed
}</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="4.4.2">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
            <name></name>
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <script>logger.info(&quot;In response transformer&quot;);
try{
	
	// Capture the HTTP response status code
	// Capture the HTTP response status code
	var statusMessage = $(&apos;responseStatusLine&apos;);
	var statusCode = $(&apos;responseStatusCode&apos;); // only available in MIRTH &gt;=4.5.2
	if (!statusCode) {
		var parts = statusMessage.trim().split(&apos; &apos;);
		statusCode = parts[1]
	}
	logger.info(&quot;Status code response data import: &quot; + statusCode);
     var responseBody = response.getMessage();
     logger.info(&quot;Got the following response from Tiro.health&quot; + responseBody);
     
	// Check if the status code is in the 2xx range
	var statusCodeInt =  parseInt(statusCode);
	if(statusCodeInt &gt;= 200 &amp;&amp; statusCodeInt &lt; 300) {
		// get the subject id, so the user does not need to select the subject
		var fhirBundle = JSON.parse(responseBody);&#xd;		var patientId = null;
		var taskId = null;
		if (fhirBundle &amp;&amp; fhirBundle.entry &amp;&amp; Array.isArray(fhirBundle.entry)) {
		    for (var i = 0; i &lt; fhirBundle.entry.length; i++) {
		        var entry = fhirBundle.entry[i];
		        if (entry.resource &amp;&amp; entry.resource.resourceType === &apos;Patient&apos;) {
		            patientId = entry.resource.id;
		            logger.info(&quot;Patient id found&quot;);
		        }
		        if (entry.resource &amp;&amp; entry.resource.resourceType === &apos;Task&apos;) {
		            taskId = entry.resource.id;
		            logger.info(&quot;Task id found&quot;);

		        }
		        if (taskId &amp;&amp; patientId) {
		        	break;
		        }
		    }
		    
		}    
		// TODO redirect to edit page if it&apos;s an update&#xd;		channelMap.put(&quot;redirect&quot;, &quot;https://app.tiro.health/reports/create?task=Task/&quot; + taskId + &quot;&amp;subject=Patient/&quot; + patientId);
	     logger.info(&quot;Status is 2xx. Redirect URL set to Tiro.health&quot;);
	} else {
	    var error = &quot;We encountered an integration error. Please contact your IT department for assistance.&quot;;
	    var detailedError = &quot;Error in MIRTH channel:\n&quot; +
	    		&quot;name: &quot; + channelName + &quot;\n&quot; +
	    		&quot;id: &quot; + channelId + &quot;\n&quot; +
	    		&quot;statusCode: &quot; + statusCode + &quot;\n&quot; +
	    		&quot;statusMessage: &quot; + statusMessage + &quot;\n&quot;;
	    
	    channelMap.put(&quot;redirect&quot;, &quot;https://reports.tiro.health/ui/error?error=&quot; + encodeURIComponent(error) + &quot;&amp;detailed_error=&quot; + encodeURIComponent(detailedError));
         logger.info(&quot;Status is NOT 2xx. Redirect URL set to an error screen.&quot;);
	} 
	
	channelMap.put(&quot;statusCode&quot;, &quot;307&quot;);
	logger.info(&quot;Redirect to: &quot; + channelMap.get(&quot;redirect&quot;));
} catch (error) {
    logger.error(&quot;Error occurred: &quot; + error.message);
    throw error; // Pass the error upstream
}</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="4.4.2">
        <elements/>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="4.4.2">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <encryptAttachments>false</encryptAttachments>
    <encryptCustomMetaData>false</encryptCustomMetaData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>true</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="4.4.2">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1749818954284</time>
        <timezone>Europe/Brussels</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
        <pruneErroredMessages>false</pruneErroredMessages>
      </pruningSettings>
      <userId>1</userId>
    </metadata>
  </exportData>
</channel>