<channel version="4.4.2">
  <id>226cef8b-c537-4b25-8b3f-2be593953609</id>
  <nextMetaDataId>3</nextMetaDataId>
  <name>FHIRBundleToKWS</name>
  <description></description>
  <revision>17</revision>
  <sourceConnector version="4.4.2">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="4.4.2">
      <pluginProperties>
        <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="4.4.2">
  <authType>NONE</authType>
        </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
      </pluginProperties>
      <listenerConnectorProperties version="4.4.2">
        <host>0.0.0.0</host>
        <port>8010</port>
      </listenerConnectorProperties>
      <sourceConnectorProperties version="4.4.2">
        <responseVariable>Auto-generate (Destinations completed)</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <xmlBody>false</xmlBody>
      <parseMultipart>true</parseMultipart>
      <includeMetadata>false</includeMetadata>
      <binaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</binaryMimeTypes>
      <binaryMimeTypesRegex>true</binaryMimeTypesRegex>
      <responseContentType>text/plain</responseContentType>
      <responseDataTypeBinary>false</responseDataTypeBinary>
      <responseStatusCode></responseStatusCode>
      <responseHeaders class="linked-hash-map"/>
      <responseHeadersVariable></responseHeadersVariable>
      <useResponseHeadersVariable>false</useResponseHeadersVariable>
      <charset>UTF-8</charset>
      <contextPath></contextPath>
      <timeout>30001</timeout>
      <staticResources/>
    </properties>
    <transformer version="4.4.2">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
          <name>ParseFhirBundle</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>logger.info(&quot;Incoming message:&quot; + msg);

var input = JSON.parse(connectorMessage.getRawData());
logger.info(&quot;Parsed message:&quot; + JSON.stringify(input));

function getIdentifierValue(resource, system) {
    // Iterate the identifiers
    if (resource.identifier &amp;&amp; Array.isArray(resource.identifier)) {
        for (var i = 0; i &lt; resource.identifier.length; i++) {
            var identifier = resource.identifier[i];
            if (identifier.system == system) {
                logger.info(&quot;Identifier with value &quot; + identifier.value + &quot; found for system &quot; + system);
                return identifier.value;
            }
        }
    }
    return null;
}

function getFirstResourceByType(bundle, resourceType) {
    // Iterate the Bundle entries
    if (bundle.entry &amp;&amp; Array.isArray(bundle.entry)) {
        for (var i = 0; i &lt; bundle.entry.length; i++) {
            var entry = bundle.entry[i];
            if (entry.resource &amp;&amp; entry.resource.resourceType == resourceType) {
                return entry.resource;
            }
        }
    }
    return null;
}

function getResourceByReference(bundle, reference) {
    // Iterate the Bundle entries
    if (bundle.entry &amp;&amp; Array.isArray(bundle.entry)) {
        for (var i = 0; i &lt; bundle.entry.length; i++) {
            var entry = bundle.entry[i];
            if (entry.fullUrl.includes(reference)) {
                return entry.resource;
            }
        }
    }
    return null;
}

try {
    var questionnaireResponse = getFirstResourceByType(input, &apos;QuestionnaireResponse&apos;);
    if (questionnaireResponse == null) {
        throw Error(&quot;No questionnaireResponse found.&quot;);
    }
    // parse questionnaireResponse
    var verslagExternId = getIdentifierValue(questionnaireResponse, &quot;http://tiro.health/fhir/NamingSystem/report-id&quot;);
    logger.info(&quot;verslagExternId found: &quot; + verslagExternId);
    channelMap.put(&quot;verslagExternId&quot;, verslagExternId);

    // Get plaintext summary
    if (questionnaireResponse.text &amp;&amp; questionnaireResponse.text.extension &amp;&amp; Array.isArray(questionnaireResponse.text.extension)) {
        for (var i = 0; i &lt; questionnaireResponse.text.extension.length; i++) {
            var extension = questionnaireResponse.text.extension[i];
            if (extension.valueAttachment &amp;&amp; extension.valueAttachment.contentType == &apos;text/plain&apos;) {
                logger.info(&quot;Plaintext report found:&quot; + extension.valueAttachment.data);
                // Decode base 64
                var reportText = Packages.java.lang.String(FileUtil.decode(extension.valueAttachment.data));
                logger.info(&quot;Decoded plaintext report: &quot; + reportText);
                channelMap.put(&quot;reportText&quot;, reportText);
            }
        }
    }

    // check if it&apos;s an update
    if (questionnaireResponse.meta &amp;&amp; questionnaireResponse.meta.versionId &amp;&amp; questionnaireResponse.meta.versionId != &apos;1&apos;) {
        channelMap.put(&quot;isUpdate&quot;, true);
    } else {
        channelMap.put(&quot;isUpdate&quot;, false);
    }


    if (questionnaireResponse.subject) {
        var patient = getResourceByReference(input, questionnaireResponse.subject.reference);
        if (patient == null) {
            throw Error(&quot;No questionnaireResponse subject resource found.&quot;);
        }
        // parse patient
        var ead = getIdentifierValue(patient, &quot;https://fhir.nexuzhealth.com/standards/fhir/NamingSystem/kws/pm/patient/eadnr&quot;);
        logger.info(&quot;ead found: &quot; + ead);
        channelMap.put(&quot;ead&quot;, ead);
    }


    if (questionnaireResponse.encounter) {
        var encounter = getResourceByReference(input, questionnaireResponse.encounter.reference);
        if (encounter == null) {
            throw Error(&quot;No questionnaireResponse encounter resource found.&quot;);
        }

        // parse encounter
        var cnr = getIdentifierValue(encounter, &quot;https://fhir.nexuzhealth.com/standards/fhir/NamingSystem/kws/bifrost/receptie/cnr&quot;);
        logger.info(&quot;cnr found: &quot; + cnr);
        channelMap.put(&quot;cnr&quot;, cnr);

        // parse supervisor
        if (encounter.participant &amp;&amp; Array.isArray(encounter.participant)) {
            for (var i = 0; i &lt; encounter.participant.length; i++) {
                var participant = encounter.participant[i];
                if (participant.type &amp;&amp; Array.isArray(participant.type) &amp;&amp; participant.type[0].coding &amp;&amp; Array.isArray(participant.type[0].coding)) {
                    if (participant.type[0].coding[0].code == &apos;RESP&apos;) {
                        if (participant.actor &amp;&amp; participant.actor.identifier) {
                            var identifier = participant.actor.identifier;
                            if (identifier.system == &apos;https://tiro.health/standards/fhir/NamingSystem/kws/user-id&apos; &amp;&amp; identifier.value) {
                                logger.info(&quot;Supervisor user ID found: &quot; + identifier.value);
                                channelMap.put(&quot;supervisor&quot;, identifier.value);
                                break;
                            } else {
                                logger.warn(&quot;Supervisor participant found, but with unexpected identifier system or missing value.&quot;);
                            }
                        } else if (participant.actor &amp;&amp; participant.actor.reference) {
                        		var supervisorResource = getResourceByReference(input, participant.actor.reference);
                        		var identifierValue = getIdentifierValue(supervisorResource, &quot;https://tiro.health/standards/fhir/NamingSystem/kws/user-id&quot;);
                        		channelMap.put(&quot;supervisor&quot;, identifierValue);
                        		break;
                        } else {
                            logger.warn(&quot;Supervisor participant found, but missing actor reference or identifier.&quot;);
                        }
                    }
                }
            }
        }
    }
} catch (error) {
    logger.error(&quot;Error occurred: &quot; + error.message);
    throw error; // Pass the error upstream
}</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
      </elements>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>RAW</inboundDataType>
      <outboundDataType>RAW</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.2">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.2">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.2">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.2">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="4.4.2">
      <elements/>
    </filter>
    <transportName>HTTP Listener</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="4.4.2">
      <metaDataId>2</metaDataId>
      <name>Optional delete verslag in KWS</name>
      <properties class="com.mirth.connect.connectors.tcp.TcpDispatcherProperties" version="4.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="4.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>true</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <transmissionModeProperties class="com.mirth.connect.plugins.mllpmode.MLLPModeProperties">
          <pluginPointName>MLLP</pluginPointName>
          <startOfMessageBytes>0B</startOfMessageBytes>
          <endOfMessageBytes>1C0D</endOfMessageBytes>
          <useMLLPv2>false</useMLLPv2>
          <ackBytes>06</ackBytes>
          <nackBytes>15</nackBytes>
          <maxRetries>2</maxRetries>
        </transmissionModeProperties>
        <serverMode>false</serverMode>
        <remoteAddress>127.0.0.1</remoteAddress>
        <remotePort>2575</remotePort>
        <overrideLocalBinding>false</overrideLocalBinding>
        <localAddress>0.0.0.0</localAddress>
        <localPort>0</localPort>
        <sendTimeout>5000</sendTimeout>
        <bufferSize>65536</bufferSize>
        <maxConnections>10</maxConnections>
        <keepConnectionOpen>false</keepConnectionOpen>
        <checkRemoteHost>false</checkRemoteHost>
        <responseTimeout>5000</responseTimeout>
        <ignoreResponse>false</ignoreResponse>
        <queueOnResponseTimeout>true</queueOnResponseTimeout>
        <dataTypeBinary>false</dataTypeBinary>
        <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
        <template>${deleteXml}</template>
      </properties>
      <transformer version="4.4.2">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
            <name>Build XML and send to KWS</name>
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <script>var ead = channelMap.get(&quot;ead&quot;);
var cnr = channelMap.get(&quot;cnr&quot;);
var verslagExternId = channelMap.get(&quot;verslagExternId&quot;);
var ziekenhuis = configurationMap.get(&quot;tiroKwsZiekenhuis&quot;);
var appNaam = configurationMap.get(&quot;tiroKwsAppNaam&quot;);

// validation of required values
if (ead == null) {
	logger.error(&quot;No ead number found.&quot;);
	throw Error(&quot;No ead number found.&quot;);
}
if (cnr == null) {
	logger.error(&quot;No cnr found.&quot;);
	throw Error(&quot;No cnr number found.&quot;);
}
if (verslagExternId == null) {
	logger.error(&quot;No verslagExternId found.&quot;);
	throw Error(&quot;No verslagExternId found.&quot;);
}
if (appNaam == null) {
	logger.error(&quot;No appNaam found.&quot;);
	throw Error(&quot;No appNaam found.&quot;);
}
if (ziekenhuis == null) {
	logger.error(&quot;No ziekenhuis found.&quot;);
	throw Error(&quot;No ziekenhuis found.&quot;);
}

// delete bestaand verslag in KWS
var xmlDelete = &apos;&lt;FILL ME&gt;&apos;
&#xd;logger.info(&quot;Delete XML to be sent: &quot; + xmlDelete);
channelMap.put(&quot;deleteXml&quot;, xmlDelete);</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="4.4.2">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="4.4.2">
        <elements>
          <com.mirth.connect.plugins.javascriptrule.JavaScriptRule version="4.4.2">
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <script>if (channelMap.get(&quot;isUpdate&quot;) == false) {
	logger.info(&quot;No need to send delete XML&quot;);
	return false; // Don&apos;t send a delete
} else {
	logger.info(&quot;Send a delete XML&quot;);
	return true;
}</script>
          </com.mirth.connect.plugins.javascriptrule.JavaScriptRule>
        </elements>
      </filter>
      <transportName>TCP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="4.4.2">
      <metaDataId>1</metaDataId>
      <name>Build XML and send to KWS</name>
      <properties class="com.mirth.connect.connectors.tcp.TcpDispatcherProperties" version="4.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="4.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>2000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>5</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>true</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <transmissionModeProperties class="com.mirth.connect.plugins.mllpmode.MLLPModeProperties">
          <pluginPointName>MLLP</pluginPointName>
          <startOfMessageBytes>0B</startOfMessageBytes>
          <endOfMessageBytes>1C0D</endOfMessageBytes>
          <useMLLPv2>false</useMLLPv2>
          <ackBytes>06</ackBytes>
          <nackBytes>15</nackBytes>
          <maxRetries>2</maxRetries>
        </transmissionModeProperties>
        <serverMode>false</serverMode>
        <remoteAddress>127.0.0.1</remoteAddress>
        <remotePort>2575</remotePort>
        <overrideLocalBinding>false</overrideLocalBinding>
        <localAddress>0.0.0.0</localAddress>
        <localPort>0</localPort>
        <sendTimeout>5000</sendTimeout>
        <bufferSize>65536</bufferSize>
        <maxConnections>10</maxConnections>
        <keepConnectionOpen>false</keepConnectionOpen>
        <checkRemoteHost>false</checkRemoteHost>
        <responseTimeout>5000</responseTimeout>
        <ignoreResponse>false</ignoreResponse>
        <queueOnResponseTimeout>true</queueOnResponseTimeout>
        <dataTypeBinary>false</dataTypeBinary>
        <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
        <template>${xml}</template>
      </properties>
      <transformer version="4.4.2">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
            <name>Build XML and send to KWS</name>
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <script>var ead = channelMap.get(&quot;ead&quot;);
var cnr = channelMap.get(&quot;cnr&quot;);
var verslagExternId = channelMap.get(&quot;verslagExternId&quot;);
var reportText = channelMap.get(&quot;reportText&quot;);
var supervisor = channelMap.get(&quot;supervisor&quot;);
var ziekenhuis = configurationMap.get(&quot;tiroKwsZiekenhuis&quot;);
var appNaam = configurationMap.get(&quot;tiroKwsAppNaam&quot;);


// validation of required values
if (ead == null) {
	logger.error(&quot;No ead number found.&quot;);
	throw Error(&quot;No ead number found.&quot;);
}
if (cnr == null) {
	logger.error(&quot;No cnr found.&quot;);
	throw Error(&quot;No cnr number found.&quot;);
}
if (verslagExternId == null) {
	logger.error(&quot;No verslagExternId found.&quot;);
	throw Error(&quot;No verslagExternId found.&quot;);
}
if (appNaam == null) {
	logger.error(&quot;No appNaam found.&quot;);
	throw Error(&quot;No appNaam found.&quot;);
}
if (ziekenhuis == null) {
	logger.error(&quot;No ziekenhuis found.&quot;);
	throw Error(&quot;No ziekenhuis found.&quot;);
}


var xml = &apos;&lt;FILL ME&gt;&apos;
&#xd;logger.info(&quot;XML to be sent: &quot; + xml);
channelMap.put(&quot;xml&quot;, xml);
channelMap.put(&quot;statusCode&quot;, 200);</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="4.4.2">
        <elements/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="4.4.2">
        <elements/>
      </filter>
      <transportName>TCP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="4.4.2">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <encryptAttachments>false</encryptAttachments>
    <encryptCustomMetaData>false</encryptCustomMetaData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>true</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="4.4.2">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1749815929686</time>
        <timezone>Europe/Brussels</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
        <pruneErroredMessages>false</pruneErroredMessages>
      </pruningSettings>
      <userId>1</userId>
    </metadata>
  </exportData>
</channel>