<channel version="4.4.2">
  <id>1e08e2aa-5836-4de7-a068-e081255fd47c</id>
  <nextMetaDataId>9</nextMetaDataId>
  <name>PollForQRs</name>
  <description></description>
  <revision>95</revision>
  <sourceConnector version="4.4.2">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.js.JavaScriptReceiverProperties" version="4.4.2">
      <pluginProperties/>
      <pollConnectorProperties version="4.4.2">
        <pollingType>INTERVAL</pollingType>
        <pollOnStart>false</pollOnStart>
        <pollingFrequency>10000</pollingFrequency>
        <pollingHour>0</pollingHour>
        <pollingMinute>0</pollingMinute>
        <cronJobs/>
        <pollConnectorPropertiesAdvanced>
          <weekly>true</weekly>
          <inactiveDays>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
          </inactiveDays>
          <dayOfMonth>1</dayOfMonth>
          <allDay>true</allDay>
          <startingHour>8</startingHour>
          <startingMinute>0</startingMinute>
          <endingHour>17</endingHour>
          <endingMinute>0</endingMinute>
        </pollConnectorPropertiesAdvanced>
      </pollConnectorProperties>
      <sourceConnectorProperties version="4.4.2">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <script>logger.info(&apos;Start polling&apos;);

function getCurrentLocalTimestamp() {
	// var now = DateUtil.getCurrentDate(&quot;yyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;&quot;); Does not take timezone in account
   var formatter = new Packages.java.text.SimpleDateFormat(&quot;yyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;&quot;); 
   // your local TZ
   formatter.setTimeZone(Packages.java.util.TimeZone.getTimeZone(&quot;CEST&quot;)); 
   return formatter.format(new Packages.java.util.Date()); 
}

var now = getCurrentLocalTimestamp();&#xd;

var lastNow = globalChannelMap.get(&apos;lastNow&apos;);
if (lastNow === null) {
    lastNow = now; // Initialize if it&apos;s the first run
}

// javascript reader doesn&apos;t have a channelMap, we put our data in a message and fill the channelMap in the transformer
var message = &apos;&lt;Dates&gt;&apos; +
              &apos;  &lt;Now&gt;&apos; + now + &apos;&lt;/Now&gt;&apos; +
              &apos;  &lt;LastNow&gt;&apos; + lastNow + &apos;&lt;/LastNow&gt;&apos; +
              &apos;&lt;/Dates&gt;&apos;;
              
globalChannelMap.put(&apos;lastNow&apos;, now);
return message;</script>
    </properties>
    <transformer version="4.4.2">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
          <name>Add now and lastNow to channelMap</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>// parse msg and fill channelMap
var msg = new XML(connectorMessage.getRawData());
var now = msg.Now.toString();
var lastNow = msg.LastNow.toString();

channelMap.put(&apos;now&apos;, now);
channelMap.put(&apos;lastNow&apos;, lastNow);


logger.info(&quot;now: &quot; + now);
logger.info(&quot;lastNow: &quot; + lastNow);
return msg;</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
          <name>Add channelName to channelMap</name>
          <sequenceNumber>1</sequenceNumber>
          <enabled>true</enabled>
          <script>// parse msg and fill channelMap
var msg = new XML(connectorMessage.getRawData());
var now = msg.Now.toString();
var lastNow = msg.LastNow.toString();

channelMap.put(&apos;now&apos;, now);
channelMap.put(&apos;lastNow&apos;, lastNow);


logger.info(&quot;now: &quot; + now);
logger.info(&quot;lastNow: &quot; + lastNow);
return msg;</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
      </elements>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>RAW</inboundDataType>
      <outboundDataType>RAW</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.2">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.2">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.2">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.2">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="4.4.2">
      <elements/>
    </filter>
    <transportName>JavaScript Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="4.4.2">
      <metaDataId>1</metaDataId>
      <name>Get QuestionnaireResponse</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="4.4.2">
        <pluginProperties/>
        <destinationConnectorProperties version="4.4.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <host>https://reports.tiro.health/fhir/r5/QuestionnaireResponse</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>get</method>
        <headers class="linked-hash-map">
          <entry>
            <string>x-channel-name</string>
            <list>
              <string>${channelName}</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map">
          <entry>
            <string>_lastUpdated</string>
            <list>
              <string>lt${now}</string>
              <string>ge${lastNow}</string>
            </list>
          </entry>
          <entry>
            <string>status</string>
            <list>
              <string>completed</string>
            </list>
          </entry>
          <entry>
            <string>_include</string>
            <list>
              <string>QuestionnaireResponse:subject</string>
              <string>QuestionnaireResponse:encounter</string>
            </list>
          </entry>
        </parameters>
        <useHeadersVariable>false</useHeadersVariable>
        <headersVariable></headersVariable>
        <useParametersVariable>false</useParametersVariable>
        <parametersVariable></parametersVariable>
        <responseXmlBody>false</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>false</responseIncludeMetadata>
        <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>true</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>true</usePreemptiveAuthentication>
        <username>${tiroUsername}</username>
        <password>${tiroPassword}</password>
        <content></content>
        <contentType>application/json</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>DEFAULT_ENCODING</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="4.4.2">
        <elements/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="4.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="4.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="4.4.2">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <script>logger.info(&quot;In response transformer&quot;);

function getEntryByReference(bundle, reference) {
    // Iterate the Bundle entries
    if (bundle.entry &amp;&amp; Array.isArray(bundle.entry)) {
        for (var i = 0; i &lt; bundle.entry.length; i++) {
            var entry = bundle.entry[i];
            if (entry.fullUrl.includes(reference)) {
                return entry;
            }
        }
    }
    return null;
}

try {
    // Capture the HTTP response status code,
    var statusMessage = $(&apos;responseStatusLine&apos;);
    var statusCode = $(&apos;responseStatusCode&apos;); // only available in MIRTH &amp;gt;=4.5.2
    if (!statusCode) {
        var parts = statusMessage.trim().split(&apos; &apos;);
        var statusCode = parts[1]
    }
    var responseBody = response.getMessage();
    logger.info(&quot;GET QR response code: &quot; + statusCode);
    logger.info(&quot;GET QR  response body: &quot; + responseBody);
    // Check if the status code is in the 2xx range
    if (statusCode != &quot;200&quot; &amp;&amp; statusCode != &quot;201&quot;) {
        logger.error(&quot;GET QRs returns unexpected HTTP status: &quot; + statusCode + &quot;, body: &quot; + responseBody);
        responseStatus = ERROR;
        return;
    }

    logger.info(&quot;Successfully received QuestionnaireResponse Bundle. Attempting to parse and route individual QRs.&quot;);
    var bundle;
    try {
        bundle = JSON.parse(responseBody);
    } catch (e) {
        logger.error(&quot;Error parsing FHIR Bundle JSON from response: &quot; + e.message);
        responseStatus = ERROR; // Set Mirth message status to error
        return; // Stop further processing in this transformer
    }

    if (!bundle.entry || bundle.entry.length === 0) {
        logger.info(&quot;FHIR Bundle contains no entries. No QRs to route downstream.&quot;);
        responseStatus = SENT;
        return;
    }

    // Iterate through each entry in the bundle
    for (var i = 0; i &lt; bundle.entry.length; i++) {
        var entry = bundle.entry[i];

        // Check if the entry contains a resource and if it&apos;s a QuestionnaireResponse
        if (entry.resource &amp;&amp; entry.resource.resourceType === &apos;QuestionnaireResponse&apos;) {
            var qrResource = entry.resource;
            var patientEntry = getEntryByReference(bundle, qrResource.subject.reference);
            if (qrResource.encounter) {
                var encounterEntry = getEntryByReference(bundle, qrResource.encounter.reference);
            }
            // Build a bundle with 1 QR and it&apos;s resolved patient and encounter resources
            var collectionBundle = {
                &quot;resourceType&quot;: &quot;Bundle&quot;,
                &quot;type&quot;: &quot;collection&quot;,
                &quot;entry&quot;: []
            };
            if (patientEntry) {
                collectionBundle.entry.push({
                    &quot;resource&quot;: patientEntry.resource,
                    &quot;fullUrl&quot;: patientEntry.fullUrl
                });
            } else {
            	logger.warn(&quot;No patient entry found&quot;);
            }
            if (encounterEntry) {
                collectionBundle.entry.push({
                    &quot;resource&quot;: encounterEntry.resource,
                    &quot;fullUrl&quot;: encounterEntry.fullUrl
                });
            }
            collectionBundle.entry.push({
                &quot;resource&quot;: qrResource,
                &quot;fullUrl&quot;: entry.fullUrl
            });

            var collectionBundlePayload = JSON.stringify(collectionBundle);
            // Send collectionBundle to downstream channel
            var downstreamChannelName = &quot;FHIRBundleToKWS&quot;;
            try {
                router.routeMessage(downstreamChannelName, collectionBundlePayload);
                logger.info(&apos;Successfully routed QuestionnaireResponse &apos; + qrResource.id + &apos; to channel: &apos; + downstreamChannelName);
            } catch (routeError) {
                logger.error(&apos;Error routing QR &apos; + qrResource.id + &apos; to channel &apos; + downstreamChannelName + &apos;: &apos; + routeError.message);
            }
        }
    }


} catch (error) {
    logger.error(&quot;Error occurred: &quot; + error.message);
    throw error; // Pass the error upstream
}</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="4.4.2">
        <elements/>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="4.4.2">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <encryptAttachments>false</encryptAttachments>
    <encryptCustomMetaData>false</encryptCustomMetaData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>true</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="4.4.2">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1749818584685</time>
        <timezone>Europe/Brussels</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
        <pruneErroredMessages>false</pruneErroredMessages>
      </pruningSettings>
      <userId>1</userId>
    </metadata>
  </exportData>
</channel>